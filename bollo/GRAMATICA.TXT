P        :: '$$' <ESTATUTO> '$$' <END OF FILE>

//Daclaracion de variable
ESTATUTO :: <DECLARACION> <ESTATUTO>

//Asignacion de valor
ESTATUTO :: ID '=' <CALCULO> ';' <ESTATUTO>

//Bloque de if
ESTATUTO :: 'if' '(' [NUM | ID | ['(' <CALCULO> ')']] COMPARADOR [NUM | ID | ['('<CALCULO>')']] ')' =>
            =>'{'<ESTATUTO>'}' <ELSE> <ESTATUTO>

//Imprimir una linea
ESTATUTO :: 'print' '(' [ID | CADENA | '('<CALCULO>')'] ')' ';' <ESTATUTO>

//Bloque de for
ESTATUTO :: 'for' '(' ['int' 'ID' | 'ID'] '=' [NUM|ID|'('<CALCULO>')'] ';'
           [NUM|ID|<CALCULO>] COMPARADOR [NUM|ID|CALCULO] ';'
           ID ['++'|'--'] ';'')' '{' <ESTATUTO> '}'

//Manejador de else
ELSE     :: 'else' '{' <ESTATUTO> '}'

//Declaraciones de datos
DECLARACION :: 'int' ID ['=' 'inputInt' | '=' NUM ] ';' <DECLARACION>
DECLARACION :: 'float' ID ['=' 'inputFloat' | '=' FLOAT ] ';' <DECLARACION>
DECLARACION :: 'String' ID ['=' 'inputString' | '=' CADENA ] ';' <DECLARACION>
DECLARACION :: <ESTATUTO>


CALCULO :: [ID|FLOAT|NUM|'(' <CALCULO> ')'] OPERADOR [ID|FLOAT|NUM|'('<CALCULO>')']
CALCULO :: OPERADOR [ID|FLOAT|NUM|'('<CALCULO>')']

//Expresiones regulares
NUM    = (0-9)+
FLOAT  = (0-9)+'.'(0-9)+
CADENA = '"' (a-zA-Z0-9)* '"'
ID     = (a-zA-Z)+(a-zA-Z0-9)*